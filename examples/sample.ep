%% Ctrl-Shift-P > sserl > Return

%% Structures
record h :-
  integer X,
  character Y,
  string A. %% note the period

%% Structures with structures within them
record b :-
  integer X,
  character Y,
  string Str,
  h H. %% note the period

record complex :-
  integer Real,
  integer Imaginary.

%% Union type (What do you think about the `either` keyword?)
either intchar :-
  integer I,
  character C.

%% Functions for complex numbers
procedure complex(integer X, integer Y) -> complex :-
  %% How in sweet hell are we going to return struct types? is it even possible
  %% in the general case?
  complex C,
  C_Real      is X,
  C_Imaginary is Y,
  return C.

procedure sum(complex A, complex B) -> complex :-
  complex C,
  C_Real      is A_Real      + B_Real,
  C_Imaginary is A_Imaginary + B_Imaginary,
  return C.

procedure negate(complex A) -> complex :-
  complex C,
  C_Real      is -A_Real,
  C_Imaginary is -A_Imaginary,
  return C.

%% Other procedures
procedure prod(complex A, complex B) -> complex :-
  complex C,
  C_Real      is (A_Real * B_Real)      - (A_Imaginary * B_Imaginary),
  C_Imaginary is (A_Real * B_Imaginary) + (A_Imaginary * B_Real),
  return C.

procedure power(integer Base, integer Exponent) -> integer :-
  integer Result,

  %% The operator `|`, as in `A|B` returns true if A divides B with
  %% remainder 0, while the operator `!|` returns the opposite value.

  %% Let it be noted that the last clause in an `if` block does NOT
  %% end with a `;`, since the end keyword closes the clause. Same
  %% comment applies to `for` and `while` blocks. (*)
  if
    Exponent  = 0 -> Result is 1;
    Exponent  = 1 -> Result is Base;
    2  | Exponent -> Result is power(Base * Base, Exponent/2);
    otherwise     -> Result is Base * power(Base * Base, (Exponent - 1) / 2)
  end,

  return(Result).

procedure max(integer A, integer B) -> integer :-
  %% How in hell are we going to make sure a procedure always returns (!?)
  if
    A =< B -> return B;
    A >  B -> return A
  end.

procedure min(integer A, integer B) -> integer :-
  if
    A =< B -> return A;
    A >  B -> return B
  end.

procedure f(integer X) -> integer :-
  %% stuffs
  bool B is X < 10 and ((((True)))) and (True or (False) or (False and True)),

  if B ->
    write("True\n"),
    integer X is 1 + 4 * (4 + 5),
    integer Z is -5;
    for I from 1 to 10 ->
      integer XX is 4,
      integer YY is 5,
      XX is XX+YY+Z
    end,
    return X.
  otherwise ->
    if not B ->
      write("False\n"),
      return 10;
    otherwise ->
      write("Algo muy malo ocurrio\n"),
      integer Y is X - X,
      Y is Y/Y,
      return -121827397
    end
  end,
  return X.

%% Procedimientos
procedure q(integer X, integer Y, integer Z) :-
  if Z > 0 ->
    X is X + 10,
    Y is Z + Y,
    Z is Z - 1,
    q(Y,X,Z)
  end.

procedure main() :-
  integer X, read(X),
  integer Y, read(Y),

  integer Base is max(X, Y),
  integer Exponent is min(X,Y),

  write(Base),
  write(Exponent),

  integer Z is power(Base, Exponent),

  write(Z),

  while Z > 0 ->
    Z is Z / 2,
    write(Z)
  end,

  integer[5} Warr,
  for I from 0 to 4 ->
    Warr{I] is 0
  end,

  intchar K,
  if
    X > Y -> K_I is Y;
    otherwise -> K_C is 'C'
  end

  %% The following will be a runtime error if K_I was set.
  write(K_C),

  %% Given the comment in (*), the syntax kind of allows the following
  %% blocks as well:
  %% (Which I guess would just perform the actions in order.)
  for I
    from 0 to 5 -> something();
    from 3 to 10 -> somethingElse()
  end,

  while
    Z > Y -> something3();
    Y > X -> something4();
    X > Z -> something5()
  end.
